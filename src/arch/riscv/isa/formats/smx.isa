// -*- mode:c++ -*-

// Copyright (c) 2023 Max Xing
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// SMX instructions
//

def template SmxConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
        %(set_indvar_reg)s;
    }
}};

def template SmxExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        auto &se = static_cast<RiscvISA::ISA *>(xc->tcBase()->getIsaPtr())
            ->streamEngine();

        %(op_decl)s;
        %(op_rd)s;
        %(code)s;
        %(op_wb)s;
        return NoFault;
    }
}};

def template SmxDisasmDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst);
        Fault execute(ExecContext *, trace::InstRecord *) const override;
        std::string generateDisassembly(
            Addr pc, const loader::SymbolTable *symtab) const override;
    };
}};

def template SmxCfgIvDisasm {{
    std::string
    %(class_name)s::generateDisassembly(
            Addr pc, const loader::SymbolTable *symtab) const
    {
        std::stringstream ss;
        ss << "smx_cfg_iv_";
        switch (FUNCT2) {
          case 0b00:
            ss << 'b';
            break;
          case 0b01:
            ss << 'h';
            break;
          case 0b10:
            ss << 'w';
            break;
          case 0b11:
            ss << 'd';
            break;
          default:
            GEM5_UNREACHABLE;
        }
        if (IVUNSIGNED) ss << 'u';
        ss << ' ' << registerName(srcRegIdx(0)) << ", " <<
            registerName(srcRegIdx(1)) << ", " <<
            registerName(srcRegIdx(2)) << ", ";
        switch (STOPCOND) {
          case SMX_COND_GT:
            ss << "gt";
            break;
          case SMX_COND_GE:
            ss << "ge";
            break;
          case SMX_COND_LT:
            ss << "lt";
            break;
          case SMX_COND_LE:
            ss << "le";
            break;
          case SMX_COND_GTU:
            ss << "gtu";
            break;
          case SMX_COND_GEU:
            ss << "geu";
            break;
          case SMX_COND_LTU:
            ss << "ltu";
            break;
          case SMX_COND_LEU:
            ss << "leu";
            break;
          case SMX_COND_EQ:
            ss << "eq";
            break;
          case SMX_COND_NE:
            ss << "ne";
            break;
          default:
            GEM5_UNREACHABLE;
        }
        return ss.str();
    }
}};

def template SmxCfgMsDisasm {{
    std::string
    %(class_name)s::generateDisassembly(
            Addr pc, const loader::SymbolTable *symtab) const
    {
        std::stringstream ss;
        ss << mnemonic << ' ' << registerName(srcRegIdx(0)) << ", " <<
            registerName(srcRegIdx(1)) << ", " << DEP1 << ", " <<
            KIND1 << ", " << MSWIDTH;
        return ss.str();
    }
}};

def template SmxCfgAddrDisasm {{
    std::string
    %(class_name)s::generateDisassembly(
            Addr pc, const loader::SymbolTable *symtab) const
    {
        std::stringstream ss;
        ss << mnemonic << ' ' << registerName(srcRegIdx(0)) << ", " <<
            DEP1 << ", " << KIND1 << ", " << registerName(srcRegIdx(1)) <<
            ", " << DEP2 << ", " << KIND2;
        return ss.str();
    }
}};

def template SmxMemDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst);
        Fault execute(ExecContext *, trace::InstRecord *) const override;
        Fault initiateAcc(ExecContext *, trace::InstRecord *) const override;
        Fault completeAcc(PacketPtr, ExecContext *,
                          trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template SmxLoadExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        auto &se = static_cast<RiscvISA::ISA *>(xc->tcBase()->getIsaPtr())
            ->streamEngine();

        Addr EA;

        %(op_decl)s;
        %(op_rd)s;

        if (!se.isValidStream(stream, SMX_KIND_MS)) {
            return std::make_shared<IllegalInstFault>(
                    "SMX load references an invalid stream", machInst);
        }
        EA = se.getMemoryAddr(xc, this, stream);

        if (!alignmentOk(xc, EA, sizeof(Mem))) {
            return std::make_shared<AddressFault>(EA, LOAD_ADDR_MISALIGNED);
        }
        {
            Fault fault =
                readMemAtomicLE(xc, traceData, EA, Mem, memAccessFlags);
            if (fault != NoFault)
                return fault;
        }

        %(code)s;
        %(op_wb)s;
        return NoFault;
    }

    Fault
    %(class_name)s::initiateAcc(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        auto &se = static_cast<RiscvISA::ISA *>(xc->tcBase()->getIsaPtr())
            ->streamEngine();

        Addr EA;

        %(op_src_decl)s;
        %(op_rd)s;

        if (!se.isValidStream(stream, SMX_KIND_MS)) {
            return std::make_shared<IllegalInstFault>(
                    "SMX load references an invalid stream", machInst);
        }
        EA = se.getMemoryAddr(xc, this, stream);

        if (!alignmentOk(xc, EA, sizeof(Mem))) {
            return std::make_shared<AddressFault>(EA, LOAD_ADDR_MISALIGNED);
        }
        return initiateMemRead(xc, traceData, EA, Mem, memAccessFlags);
    }

    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        %(op_decl)s;
        %(op_rd)s;

        getMemLE(pkt, Mem, traceData);

        %(code)s;
        %(op_wb)s;

        return NoFault;
    }
}};

def template SmxStoreExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        auto &se = static_cast<RiscvISA::ISA *>(xc->tcBase()->getIsaPtr())
            ->streamEngine();

        Addr EA;

        %(op_decl)s;
        %(op_rd)s;

        if (!se.isValidStream(stream, SMX_KIND_MS)) {
            return std::make_shared<IllegalInstFault>(
                    "SMX load references an invalid stream", machInst);
        }
        EA = se.getMemoryAddr(xc, this, stream);

        %(code)s;

        if (!alignmentOk(xc, EA, sizeof(Mem))) {
            return std::make_shared<AddressFault>(EA, STORE_ADDR_MISALIGNED);
        }
        {
            Fault fault =
                writeMemAtomicLE(xc, traceData, Mem, EA, memAccessFlags,
                        nullptr);
            if (fault != NoFault)
                return fault;
        }

        %(op_wb)s;
        return NoFault;
    }

    Fault
    %(class_name)s::initiateAcc(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        auto &se = static_cast<RiscvISA::ISA *>(xc->tcBase()->getIsaPtr())
            ->streamEngine();

        Addr EA;

        %(op_decl)s;
        %(op_rd)s;

        if (!se.isValidStream(stream, SMX_KIND_MS)) {
            return std::make_shared<IllegalInstFault>(
                    "SMX load references an invalid stream", machInst);
        }
        EA = se.getMemoryAddr(xc, this, stream);

        %(code)s;

        if (!alignmentOk(xc, EA, sizeof(Mem))) {
            return std::make_shared<AddressFault>(EA, STORE_ADDR_MISALIGNED);
        }
        {
            Fault fault = writeMemTimingLE(xc, traceData, Mem, EA,
                memAccessFlags, nullptr);
            if (fault != NoFault)
                return fault;
        }

        %(op_wb)s;

        return NoFault;
    }

    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        return NoFault;
    }
}};

def template SmxBranchDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst);
        Fault execute(ExecContext *, trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
        using %(base_class)s::branchTarget;
    };
}};

// Should be synced with `arch/riscv/regs/int.hh`.
let {{
    INDVAR_REG_NUM = 4;
}};

def format SmxCfgIvOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxOp',
        {'code': code, 'set_indvar_reg': ''}, opt_flags)
    header_output = SmxDisasmDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop) + SmxCfgIvDisasm.subst(iop)
}};

def format SmxCfgMsOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxOp',
        {'code': code, 'set_indvar_reg': ''}, opt_flags)
    header_output = SmxDisasmDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop) + SmxCfgMsDisasm.subst(iop)
}};

def format SmxCfgAddrOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxOp',
        {'code': code, 'set_indvar_reg': ''}, opt_flags)
    header_output = SmxDisasmDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop) + SmxCfgAddrDisasm.subst(iop)
}};

def format SmxReadyOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxOp',
        {'code': code, 'set_indvar_reg': 'setIndvarDests();'}, opt_flags)
    iop.padDestRegIdx(INDVAR_REG_NUM)
    header_output = BasicDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxEndOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxOp',
        {'code': code, 'set_indvar_reg': ''}, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxLoadOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxLoadOp',
        {'code': code, 'set_indvar_reg': 'setIndvarSrcs();'}, opt_flags)
    iop.padSrcRegIdx(INDVAR_REG_NUM)
    header_output = SmxMemDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxLoadExecute.subst(iop)
}};

def format SmxStoreOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxStoreOp',
        {'code': code, 'set_indvar_reg': 'setIndvarSrcs();'}, opt_flags)
    iop.padSrcRegIdx(INDVAR_REG_NUM)
    header_output = SmxMemDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxStoreExecute.subst(iop)
}};

def format SmxImmOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxImmOp',
        {'code': code, 'set_indvar_reg': 'setIndvarSrcs();'}, opt_flags)
    iop.padSrcRegIdx(INDVAR_REG_NUM)
    header_output = BasicDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxStepOp(code, *opt_flags) {{
    set_indvar_reg = '''
        setIndvarSrcs();
        setIndvarDests();
    '''
    iop = InstObjParams(name, Name, 'SmxImmOp',
        {'code': code, 'set_indvar_reg': set_indvar_reg}, opt_flags)
    iop.padSrcRegIdx(INDVAR_REG_NUM)
    iop.padDestRegIdx(INDVAR_REG_NUM)
    header_output = BasicDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxStepBrOp(code, *opt_flags) {{
    set_indvar_reg = '''
        setIndvarSrcs();
        setIndvarDests();
    '''
    iop = InstObjParams(name, Name, 'SmxBranchOp',
        {'code': code, 'set_indvar_reg': set_indvar_reg}, opt_flags)
    iop.padSrcRegIdx(INDVAR_REG_NUM)
    iop.padDestRegIdx(INDVAR_REG_NUM)
    header_output = SmxBranchDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxBrOp(code, *opt_flags) {{
    set_indvar_reg = '''
        setIndvarSrcs();
    '''
    iop = InstObjParams(name, Name, 'SmxBranchOp',
        {'code': code, 'set_indvar_reg': set_indvar_reg}, opt_flags)
    iop.padSrcRegIdx(INDVAR_REG_NUM)
    header_output = SmxBranchDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};
