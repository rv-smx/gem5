// -*- mode:c++ -*-

// Copyright (c) 2023 Max Xing
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// SMX instructions
//

def template SmxConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(set_indvar_reg)s;
        %(constructor)s;
    }
}};

def template SmxExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        auto tc = xc->tcBase();
        auto isa = static_cast<RiscvISA::ISA *>(tc->getIsaPtr());
        auto &se = isa->streamEngine();

        %(op_decl)s;
        %(op_rd)s;
        %(code)s;
        %(op_wb)s;
        return NoFault;
    }
}};

def template SmxBranchDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst);
        Fault execute(ExecContext *, trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
        using %(base_class)s::branchTarget;
    };
}};

def format SmxOp(code, set_indvar_reg='', *opt_flags) {{
    iop = InstObjParams(name, Name, 'SmxOp',
        {'code': code, 'set_indvar_reg': set_indvar_reg}, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxStepOp(code, *opt_flags) {{
    set_indvar_reg = '''
        setIndvarSrcs();
        setIndvarDests();
    '''
    iop = InstObjParams(name, Name, 'SmxImmOp',
        {'code': code, 'set_indvar_reg': set_indvar_reg}, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxStepBrOp(code, *opt_flags) {{
    set_indvar_reg = '''
        setIndvarSrcs();
        setIndvarDests();
    '''
    iop = InstObjParams(name, Name, 'SmxBranchOp',
        {'code': code, 'set_indvar_reg': set_indvar_reg}, opt_flags)
    header_output = SmxBranchDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};

def format SmxBrOp(code, *opt_flags) {{
    set_indvar_reg = '''
        setIndvarSrcs();
    '''
    iop = InstObjParams(name, Name, 'SmxBranchOp',
        {'code': code, 'set_indvar_reg': set_indvar_reg}, opt_flags)
    header_output = SmxBranchDeclare.subst(iop)
    decoder_output = SmxConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = SmxExecute.subst(iop)
}};
